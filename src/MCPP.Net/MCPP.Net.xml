<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MCPP.Net</name>
    </assembly>
    <members>
        <member name="T:MCPP.Net.Common.DependencyInjection.KeyedServiceDescriptionAttribute">
            <summary>
            标记服务描述特性（支持Keyed Service）
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.DependencyInjection.KeyedServiceDescriptionAttribute.ServiceType">
            <summary>
            服务类型
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.DependencyInjection.KeyedServiceDescriptionAttribute.ServiceKey">
            <summary>
            服务键
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.DependencyInjection.KeyedServiceDescriptionAttribute.Lifetime">
            <summary>
            生命周期
            </summary>
        </member>
        <member name="M:MCPP.Net.Common.DependencyInjection.KeyedServiceDescriptionAttribute.#ctor(System.Type,System.Object,MCPP.Net.Common.DependencyInjection.ServiceLifetime)">
            <summary>
            初始化服务描述特性
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="serviceKey">服务键</param>
            <param name="lifetime">生命周期</param>
        </member>
        <member name="T:MCPP.Net.Common.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            容器扩展
            </summary>
        </member>
        <member name="M:MCPP.Net.Common.DependencyInjection.ServiceCollectionExtensions.AddServicesFromAssemblies(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String[])">
            <summary>
            从程序集中加载类型并添加到容器中
            </summary>
            <param name="services">容器</param>
            <param name="assemblies">程序集集合</param>
            <returns></returns>
        </member>
        <member name="F:MCPP.Net.Common.DependencyInjection.ServiceLifetime.Scoped">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:MCPP.Net.Common.DependencyInjection.ServiceLifetime.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="F:MCPP.Net.Common.DependencyInjection.ServiceLifetime.Transient">
            <summary>
            瞬时
            </summary>
        </member>
        <member name="M:MCPP.Net.Common.Map.MapperExtend.ToDTOList``1(System.Object)">
            <summary>
            Entity集合转DTO集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Map.MapperExtend.ToDTO``1(System.Object)">
            <summary>
            Entity转DTO
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Map.MapperExtend.MapTo``1(System.Object,``0)">
            <summary>
            给已有对象map,适合update场景，如需过滤空值需要在AutoMapProfile 设置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="self"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:MCPP.Net.Common.Middlewares.GlobalExceptionHandlerMiddleware">
            <summary>
            全局异常处理中间件
            </summary>
        </member>
        <member name="M:MCPP.Net.Common.Middlewares.GlobalExceptionHandlerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{MCPP.Net.Common.Middlewares.GlobalExceptionHandlerMiddleware})">
            <summary>
            全局异常处理中间件
            </summary>
        </member>
        <member name="T:MCPP.Net.Common.Middlewares.ToolChangedHandlerMiddleware">
            <summary>
            用于检查每次请求是否有 MCP Tool 的更改，并执行相应的操作
            </summary>
        </member>
        <member name="M:MCPP.Net.Common.Middlewares.ToolChangedHandlerMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,MCPP.Net.Core.McpToolsKeeper)">
            <summary>
            用于检查每次请求是否有 MCP Tool 的更改，并执行相应的操作
            </summary>
        </member>
        <member name="T:MCPP.Net.Common.Model.PagedInfo`1">
            <summary>
            分页参数
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.PagedInfo`1.PageSize">
            <summary>
            每页行数
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.PagedInfo`1.PageIndex">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.PagedInfo`1.TotalNum">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.PagedInfo`1.TotalPage">
            <summary>
            总页数
            </summary>
        </member>
        <member name="T:MCPP.Net.Common.Model.PageList`1">
            <summary>
            返回分页结果
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.PageList`1.PageIndex">
            <summary>
            当前页，从1开始
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.PageList`1.PageSize">
            <summary>
            每页数量
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.PageList`1.TotalCount">
            <summary>
            总数
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.PagerInfo.PageNum">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.PagerInfo.PageSize">
            <summary>
            每页显示多少条
            </summary>
        </member>
        <member name="M:MCPP.Net.Common.Model.PagerInfo.#ctor">
            <summary>
            排序类型,前端传入的是"ascending"，"descending"
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.Result.Code">
            <summary>
            错误码，0是正常返回，异常返回错误码
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.Result.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.Result.Message">
            <summary>
            返回信息详情
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.HttpResult`1.Code">
            <summary>
            错误码，0是正常返回，异常返回错误码
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.HttpResult`1.Data">
            <summary>
            返回数据
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Model.HttpResult`1.Message">
            <summary>
            返回信息详情
            </summary>
        </member>
        <member name="M:MCPP.Net.Common.Model.ResponseResult.Success">
            <summary>
            执行成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Model.ResponseResult.Success(System.Object,System.String,System.String)">
            <summary>
            执行成功
            </summary>
            <param name="data"></param>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Model.ResponseResult.Error(System.Object,System.String,System.String)">
            <summary>
            执行失败
            </summary>
            <param name="data"></param>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Model.ResponseResult.Error(System.String,System.String)">
            <summary>
            执行失败
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Model.HttpResponseResult.Success``1">
            <summary>
            执行成功
            </summary>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Model.HttpResponseResult.Error``1(System.String,System.String)">
            <summary>
            执行失败
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Model.HttpResponseResult.Success``1(System.Object,System.String,System.String)">
            <summary>
            执行成功
            </summary>
            <param name="data"></param>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Model.HttpResponseResult.Error``1(System.Object,System.String,System.String)">
            <summary>
            执行失败
            </summary>
            <param name="data"></param>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Common.Model.HttpResponseResult.Fail``1(System.Object,System.String,System.String)">
            <summary>
            执行失败
            </summary>
            <param name="data"></param>
            <param name="code"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:MCPP.Net.Common.Options.ConnectionOptions.DbType">
            <summary>
            sqlite连接字符串
            </summary>
        </member>
        <member name="P:MCPP.Net.Common.Options.ConnectionOptions.ConnectionStrings">
            <summary>
            pg链接字符串
            </summary>
        </member>
        <member name="T:MCPP.Net.Controllers.ImportController">
            <summary>
            Swagger导入API控制器
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.#ctor(MCPP.Net.Services.IImportService)">
            <summary>
            Swagger导入API控制器
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.Import(MCPP.Net.Models.Import.CreateImportRequest)">
            <summary>
            swagger 导入
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.List">
            <summary>
            查询所有 import.
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.Get(System.Int64)">
            <summary>
            查询单个 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.Update(System.Int64,MCPP.Net.Models.Import.UpdateImportRequest)">
            <summary>
            更新 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.Delete(System.Int64)">
            <summary>
            删除 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.Enable(System.Int64)">
            <summary>
            启用 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.Disable(System.Int64)">
            <summary>
            禁用 import
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Controllers.ImportController.Reimport(System.Int64)">
            <summary>
            重新导入
            </summary>
        </member>
        <member name="T:MCPP.Net.Controllers.McpToolController">
            <summary>
            Swagger导入API控制器
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.McpToolController.#ctor(MCPP.Net.Services.IMcpToolService)">
            <summary>
            Swagger导入API控制器
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.McpToolController.Import(MCPP.Net.Models.Tool.CreateToolRequest)">
            <summary>
            单个导入 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.McpToolController.List(System.Int64)">
            <summary>
            查询所有 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.McpToolController.Get(System.Int64)">
            <summary>
            查询单个 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.McpToolController.Update(System.Int64,MCPP.Net.Models.Tool.UpdateToolRequest)">
            <summary>
            更新 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.McpToolController.Delete(System.Int64)">
            <summary>
            删除 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.McpToolController.Clear(System.Int64)">
            <summary>
            根据 ImportId 删除全部关联的 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.McpToolController.Enable(System.Int64)">
            <summary>
            启用 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Controllers.McpToolController.Disable(System.Int64)">
            <summary>
            禁用 import
            </summary>
        </member>
        <member name="T:MCPP.Net.Controllers.ToolController">
            <summary>
            手动添加工具
            </summary>
            <param name="mcpServerOptions"></param>
            <param name="httpClientFactory"></param>
        </member>
        <member name="M:MCPP.Net.Controllers.ToolController.#ctor(Microsoft.Extensions.Options.IOptions{ModelContextProtocol.Server.McpServerOptions},MCPP.Net.Services.IToolAppService,MCPP.Net.Repositories.IToolRepositories)">
            <summary>
            手动添加工具
            </summary>
            <param name="mcpServerOptions"></param>
            <param name="httpClientFactory"></param>
        </member>
        <member name="T:MCPP.Net.Core.McpServerExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder"/> extension methods
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpServerExtensions.UseToolsKeeper(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)">
            <summary>
            使用 <see cref="T:MCPP.Net.Core.McpToolsKeeper"/> 管理 Tools，方便后续的增删操作
            </summary>
        </member>
        <member name="T:MCPP.Net.Core.McpServerOptionsPostConfigure">
            <summary>
            覆盖 <see cref="T:ModelContextProtocol.Server.McpServerOptions"/> 默认配置，使用 <see cref="T:MCPP.Net.Core.McpToolsKeeper"/> 管理 Tools，方便后续的增删操作
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpServerOptionsPostConfigure.#ctor(MCPP.Net.Core.McpToolsKeeper)">
            <summary>
            覆盖 <see cref="T:ModelContextProtocol.Server.McpServerOptions"/> 默认配置，使用 <see cref="T:MCPP.Net.Core.McpToolsKeeper"/> 管理 Tools，方便后续的增删操作
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpServerOptionsPostConfigure.PostConfigure(System.String,ModelContextProtocol.Server.McpServerOptions)">
            <inheritdoc />
        </member>
        <member name="T:MCPP.Net.Core.McpToolsKeeper">
            <summary>
            Tool 管理员，可以在运行时添加和删除 Tools
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.#ctor(Microsoft.Extensions.Logging.ILogger{MCPP.Net.Core.McpToolsKeeper})">
            <summary>
            Tool 管理员，可以在运行时添加和删除 Tools
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.SetTools(ModelContextProtocol.Protocol.Types.ToolsCapability)">
            <summary>
            使用原始配置初始化<see cref="T:MCPP.Net.Core.McpToolsKeeper"/>
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.ListToolsHandler(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListToolsRequestParams},System.Threading.CancellationToken)">
            <summary>
            获取所有 Tool 集合
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.CallToolHandler(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)">
            <summary>
            调用指定的 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Core.McpToolsKeeper.NotifyDataChanged">
            <summary>
            通知数据库中的数据发生了变化
            </summary>
        </member>
        <member name="T:MCPP.Net.Database.DatabaseExtensions">
            <summary>
            DatabaseExtensions
            </summary>
        </member>
        <member name="M:MCPP.Net.Database.DatabaseExtensions.Configure(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            </summary>
        </member>
        <member name="T:MCPP.Net.Database.DatabaseInitService">
            <summary>
            数据库初始化服务
            </summary>
        </member>
        <member name="M:MCPP.Net.Database.DatabaseInitService.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory)">
            <summary>
            数据库初始化服务
            </summary>
        </member>
        <member name="M:MCPP.Net.Database.DatabaseInitService.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:MCPP.Net.Database.DatabaseOptions">
            <summary>
            数据库配置选项
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.DatabaseOptions.DbType">
            <summary>
            数据库类型，目前支持 sqlite 和 postgresql
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.DatabaseOptions.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="T:MCPP.Net.Database.Entities.Import">
            <summary>
            导入表，一条记录对应一个 swagger.json
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.Id">
            <summary>
            自增ID
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.Name">
            <summary>
            导入时设定的名称，长度限制[1,5]
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.ImportFrom">
            <summary>
            导入链接
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.SourceBaseUrl">
            <summary>
            源服务器基础URL
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.Description">
            <summary>
            对本条记录的描述，简短的 name 可能词不达意，用描述进行补充说明
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.Json">
            <summary>
            swagger.json
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.McpTools">
            <summary>
            关联的所有MCP工具
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.Import.UpdatedAt">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:MCPP.Net.Database.Entities.McpTool">
            <summary>
            MCP Tool 信息表，一条记录对应一个 MCP Tool，与导入表关联
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.Id">
            <summary>
            自增ID
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.ImportId">
            <summary>
            import表关联ID
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.Import">
            <summary>
            导入表关联
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.HttpMethod">
            <summary>
            http method
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.RequestPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.Name">
            <summary>
            与 import 表的 name 拼接后为 MCP Tool Name，默认根据 request_path 生成，可修改
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.Description">
            <summary>
            导入时从 swagger 中提取，可修改，方便 MCP Client 匹配
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.InputSchema">
            <summary>
            导入时通过 swagger 信息生成
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.Enabled">
            <summary>
            是否启用，可修改，方便筛选掉不需要的接口
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.Entities.McpTool.UpdatedAt">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:MCPP.Net.Database.McppDbContext">
            <summary>
            应用数据库上下文
            </summary>
            <remarks>
            构造函数
            </remarks>
        </member>
        <member name="M:MCPP.Net.Database.McppDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{MCPP.Net.Database.McppDbContext})">
            <summary>
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.McppDbContext.HasChanged">
            <summary>
            数据是否发生了改变
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.McppDbContext.Imports">
            <summary>
            导入表
            </summary>
        </member>
        <member name="P:MCPP.Net.Database.McppDbContext.McpTools">
            <summary>
            MCP Tool信息表
            </summary>
        </member>
        <member name="M:MCPP.Net.Database.McppDbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:MCPP.Net.Database.McppDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            配置模型
            </summary>
            <param name="modelBuilder">模型构建器</param>
        </member>
        <member name="P:MCPP.Net.Models.ApiToolDto.Name">
            <summary>
            工具名称
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ApiToolDto.Desc">
            <summary>
            工具描述
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ApiToolDto.EndPoint">
            <summary>
            restful api 请求地址
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ApiToolDto.MethodType">
            <summary>
            请求方法类型 1: GET 2: POST
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ApiToolDto.InputSchema">
            <summary>
            请求参数,描述
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.Import.CreateImportRequest">
            <summary>
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.CreateImportRequest.Name">
            <summary>
            导入时设定的名称，长度限制[1,5]
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.CreateImportRequest.ImportFrom">
            <summary>
            导入链接
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.CreateImportRequest.SourceBaseUrl">
            <summary>
            源服务器基础URL
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.CreateImportRequest.Description">
            <summary>
            对本条记录的描述，简短的 name 可能词不达意，用描述进行补充说明
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.CreateImportRequest.Json">
            <summary>
            swagger.json
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.CreateImportRequest.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.Import.ImportResponse">
            <summary>
            导入成功后的响应
            </summary>
        </member>
        <member name="M:MCPP.Net.Models.Import.ImportResponse.#ctor(System.Int64)">
            <summary>
            </summary>
        </member>
        <member name="M:MCPP.Net.Models.Import.ImportResponse.#ctor(System.Int64,System.Int32,System.Collections.Generic.List{MCPP.Net.Models.Import.ImportResponse.Failure})">
            <summary>
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.ImportResponse.Id">
            <summary>
            导入成功后的 import id
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.ImportResponse.SuccessCount">
            <summary>
            导入成功的 tools 数量
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.ImportResponse.Faileds">
            <summary>
            导入失败的详细信息
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.Import.ImportResponse.Failure">
            <summary>
            导入失败的详细信息
            </summary>
        </member>
        <member name="M:MCPP.Net.Models.Import.ImportResponse.Failure.#ctor(System.String,System.String,System.String)">
            <summary>
            导入失败的详细信息
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.Import.QueryImportDto">
            <summary>
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.QueryImportDto.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.QueryImportDto.UpdatedAt">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.Import.UpdateImportRequest">
            <summary>
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Import.UpdateImportRequest.Id">
            <summary>
            自增ID
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.SwaggerImportRequest">
            <summary>
            Swagger导入请求
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportRequest.SwaggerUrl">
            <summary>
            Swagger文档URL或本地路径
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportRequest.SourceBaseUrl">
            <summary>
            源服务器基础URL(包含IP和端口)
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportRequest.NameSpace">
            <summary>
            生成类的命名空间
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportRequest.ClassName">
            <summary>
            生成的类名
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.SwaggerImportResult">
            <summary>
            Swagger导入结果
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportResult.Success">
            <summary>
            导入是否成功
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportResult.ApiCount">
            <summary>
            导入的API数量
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportResult.ToolClassName">
            <summary>
            工具类名称
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.SwaggerImportResult.ImportedApis">
            <summary>
            导入的API名称列表
            </summary>
        </member>
        <member name="T:MCPP.Net.Models.ImportedTool">
            <summary>
            已导入的API工具信息
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.NameSpace">
            <summary>
            工具命名空间
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.ClassName">
            <summary>
            工具类名
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.ApiCount">
            <summary>
            API数量
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.ImportDate">
            <summary>
            导入日期
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.SwaggerSource">
            <summary>
            Swagger来源
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.ImportedTool.SourceBaseUrl">
            <summary>
            源服务器基础URL
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.CreateToolRequest.ImportId">
            <summary>
            import表关联ID
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.CreateToolRequest.HttpMethod">
            <summary>
            http method
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.CreateToolRequest.RequestPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.CreateToolRequest.Name">
            <summary>
            与 import 表的 name 拼接后为 MCP Tool Name，默认根据 request_path 生成，可修改
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.CreateToolRequest.Description">
            <summary>
            导入时从 swagger 中提取，可修改，方便 MCP Client 匹配
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.CreateToolRequest.InputSchema">
            <summary>
            导入时通过 swagger 信息生成
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.QueryToolDto.CreatedAt">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.QueryToolDto.UpdatedAt">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.UpdateToolRequest.Id">
            <summary>
            自增ID
            </summary>
        </member>
        <member name="P:MCPP.Net.Models.Tool.UpdateToolRequest.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.CreateEntity.EntityService.CreateEntity(System.String,System.String)">
            <summary>
            生成实体类
            </summary>
            <param name="entityName"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetList">
            <summary>
            获取所有list
            </summary>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetListAsync">
            <summary>
            获取所有list-异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda查询
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda查询-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式获取数量
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda表达式获取数量-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel)">
            <summary>
            获取分页
            </summary>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageList``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel)">
            <summary>
            分页查询
            </summary>
            <typeparam name="P"></typeparam>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel)">
            <summary>
            获取分页-异步
            </summary>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageListAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel)">
            <summary>
            分页查询
            </summary>
            <typeparam name="P"></typeparam>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            分页查询
            </summary>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            分页查询
            </summary>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageList``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            分页查询
            </summary>
            <typeparam name="P"></typeparam>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageListAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},SqlSugar.PageModel,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            分页查询
            </summary>
            <typeparam name="P"></typeparam>
            <param name="whereExpression"></param>
            <param name="page"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageList(System.Collections.Generic.List{SqlSugar.IConditionalModel},SqlSugar.PageModel)">
            <summary>
            分页查询
            </summary>
            <param name="conditionalList"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageListAsync(System.Collections.Generic.List{SqlSugar.IConditionalModel},SqlSugar.PageModel)">
            <summary>
            分页查询
            </summary>
            <param name="conditionalList"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageList(System.Collections.Generic.List{SqlSugar.IConditionalModel},SqlSugar.PageModel,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            分页查询
            </summary>
            <param name="conditionalList"></param>
            <param name="page"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetPageListAsync(System.Collections.Generic.List{SqlSugar.IConditionalModel},SqlSugar.PageModel,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},SqlSugar.OrderByType)">
            <summary>
            分页查询
            </summary>
            <param name="conditionalList"></param>
            <param name="page"></param>
            <param name="orderByExpression"></param>
            <param name="orderByType"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetById(System.Object)">
            <summary>
            根据id获取实体
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetByIdAsync(System.Object)">
            <summary>
            根据id获取实体-异步
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetSingle(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象 （注意，需要确保唯一，如果获取到2个会报错，这种场景需要使用GetFirst）
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetSingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象-异步  （注意，需要确保唯一，如果获取到2个会报错，这种场景需要使用GetFirst）
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetFirst(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.GetFirstAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据lambda获取单个对象 --异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.Insert(`0)">
            <summary>
            实体插入
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.InsertAsync(`0)">
            <summary>
            实体插入-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.InsertRange(System.Collections.Generic.List{`0})">
            <summary>
            批量插入
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.InsertRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量插入-异步
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.InsertReturnIdentity(`0)">
            <summary>
            插入返回自增列
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.InsertReturnIdentityAsync(`0)">
            <summary>
            插入返回自增列-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.InsertReturnBigIdentity(`0)">
            <summary>
            插入返回longid
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.InsertReturnBigIdentityAsync(`0)">
            <summary>
            插入返回longid-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.DeleteByIds(System.Object[])">
            <summary>
            批量删除
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.DeleteByIdsAsync(System.Object[])">
            <summary>
            批量删除-异步
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.Delete(System.Object)">
            <summary>
            根据主键删除
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.DeleteAsync(System.Object)">
            <summary>
            根据主键删除-异步
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.Delete(`0)">
            <summary>
            根据实体删除
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.DeleteAsync(`0)">
            <summary>
            根据实体删除-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式删除
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.DeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据表达式删除-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.UpdateAsync(`0)">
            <summary>
            更新-异步
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.UpdateRange(System.Collections.Generic.List{`0})">
            <summary>
            批量更新
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.UpdateRangeAsync(System.Collections.Generic.List{`0})">
            <summary>
            批量更新-异步
            </summary>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.IsAny(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否包含元素
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.Repository`1.IsAnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否包含元素-异步
            </summary>
            <param name="whereExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MCPP.Net.Repositories.Base.SqlSugarHelper.SqlScope">
            <summary>
            DB链接
            </summary>
        </member>
        <member name="T:MCPP.Net.Repositories.tool">
            <summary>
            API定义表
            </summary>
        </member>
        <member name="P:MCPP.Net.Repositories.tool.id">
            <summary>
            Desc:自增主键ID
            Default:
            Nullable:False
            </summary>           
        </member>
        <member name="P:MCPP.Net.Repositories.tool.appId">
            <summary>
            Desc:应用id
            Default:
            Nullable:True
            </summary>           
        </member>
        <member name="P:MCPP.Net.Repositories.tool.name">
            <summary>
            Desc:tool名称
            Default:
            Nullable:False
            </summary>           
        </member>
        <member name="P:MCPP.Net.Repositories.tool.description">
            <summary>
            Desc:tool描述
            Default:
            Nullable:True
            </summary>           
        </member>
        <member name="P:MCPP.Net.Repositories.tool.endpoint">
            <summary>
            Desc:API的endpoint地址
            Default:
            Nullable:False
            </summary>           
        </member>
        <member name="P:MCPP.Net.Repositories.tool.method_type">
            <summary>
            Desc:请求方式类型(如0:GET, 1:POST, 2:PUT, 3:DELETE等)
            Default:
            Nullable:False
            </summary>           
        </member>
        <member name="P:MCPP.Net.Repositories.tool.input_schema">
            <summary>
            Desc:输入参数的JSON Schema定义
            Default:
            Nullable:True
            </summary>           
        </member>
        <member name="P:MCPP.Net.Repositories.tool.created_at">
            <summary>
            Desc:创建时间
            Default:CURRENT_TIMESTAMP
            Nullable:False
            </summary>           
        </member>
        <member name="P:MCPP.Net.Repositories.tool.updated_at">
            <summary>
            Desc:更新时间
            Default:CURRENT_TIMESTAMP
            Nullable:False
            </summary>           
        </member>
        <member name="T:MCPP.Net.Services.IImportService">
            <summary>
            MCP Import Service Interface    
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IImportService.ImportAsync(MCPP.Net.Models.Import.CreateImportRequest)">
            <summary>
            相当于 Insert 方法，但如果导入时发现数据库已存在相同 Name 和 ImportFrom 的记录，会直接覆盖，
            如果 Name 相同但 ImportFrom 不同，会拒绝本次操作并提示 Name 已存在。
            如果需要更新某条记录的 ImportFrom，请调用 <see cref="M:MCPP.Net.Services.IImportService.UpdateAsync(MCPP.Net.Models.Import.UpdateImportRequest)"/>
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IImportService.ListAsync">
            <summary>
            查询所有 import.
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IImportService.GetAsync(System.Int64)">
            <summary>
            查询单个 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IImportService.UpdateAsync(MCPP.Net.Models.Import.UpdateImportRequest)">
            <summary>
            更新 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IImportService.DeleteAsync(System.Int64)">
            <summary>
            删除 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IImportService.SetEnabledAsync(System.Int64,System.Boolean)">
            <summary>
            启用/禁用 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IImportService.ReimportAsync(System.Int64)">
            <summary>
            强制重新导入，可以用于应对导入失败的情况，也可以用于下载最新的 swagger.json 进行更新
            </summary>
        </member>
        <member name="T:MCPP.Net.Services.IMcpServerMethodRegistry">
            <summary>
            MCP服务器方法注册接口
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IMcpServerMethodRegistry.AddMethod(System.Reflection.MethodInfo)">
            <summary>
            添加方法到MCP服务器
            </summary>
            <param name="methodInfo">方法信息</param>
        </member>
        <member name="T:MCPP.Net.Services.IMcpToolService">
            <summary>
            MCP Tool Service Interface
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IMcpToolService.ImportAsync(System.Collections.Generic.List{MCPP.Net.Models.Tool.CreateToolRequest})">
            <summary>
            批量导入，覆盖所有 ImportId 相同的 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IMcpToolService.ImportAsync(MCPP.Net.Models.Tool.CreateToolRequest)">
            <summary>
            单个导入，逻辑类似 Insert or Update，根据 HttpMethod 和 RequestPath 进行匹配已存在的记录
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IMcpToolService.ListAsync(System.Int64)">
            <summary>
            根据 ImportId 查询所有 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IMcpToolService.GetAsync(System.Int64)">
            <summary>
            根据 Id 查询 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IMcpToolService.UpdateAsync(MCPP.Net.Models.Tool.UpdateToolRequest)">
            <summary>
            根据 Id 更新 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IMcpToolService.DeleteAsync(System.Int64)">
            <summary>
            删除 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IMcpToolService.DeleteByImportAsync(System.Int64)">
            <summary>
            根据 ImportId 删除全部关联的 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IMcpToolService.SetEnabledAsync(System.Int64,System.Boolean)">
            <summary>
            启用/禁用 import
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.Impl.ImportService.BuildInputSchema(System.Text.Json.Nodes.JsonNode)">
            <summary>
            根据 swagger json 中对参数的描述，构建 MCP Tool Input Schema
            </summary>
            <remarks>
            json schema 固定格式：
            <code>
            {
                "type": "object",
                "properties:": {
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "object",
                                "properties": { }
                                "required": []
                            },
                            "query": { },
                            "form": { },
                            "body": { },
                            "header": { }
                        },
                        "required": ["path", "query", "form", "body", "header"]
                    }
                },
                "required": ["parameters"]
            }
            </code>
            </remarks>
        </member>
        <member name="M:MCPP.Net.Services.Impl.McpToolService.ListAsync(System.Int64)">
            <summary>
            根据 ImportId 查询所有 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.Impl.McpToolService.GetAsync(System.Int64)">
            <summary>
            根据 Id 查询 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.Impl.McpToolService.DeleteByImportAsync(System.Int64)">
            <summary>
            根据 ImportId 删除全部关联的 Tool
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.IToolAppService.NewTool(MCPP.Net.Models.ApiToolDto)">
            <summary>
            添加工具
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:MCPP.Net.Services.McpServerMethodRegistry">
            <summary>
            MCP服务器方法注册实现
            </summary>
        </member>
        <member name="M:MCPP.Net.Services.McpServerMethodRegistry.AddMethod(System.Reflection.MethodInfo)">
            <summary>
            添加方法到MCP服务器
            </summary>
            <param name="methodInfo">方法信息</param>
        </member>
        <member name="M:MCPP.Net.Services.McpServerMethodRegistry.GetRegisteredMethods">
            <summary>
            获取已注册的所有方法
            </summary>
            <returns>已注册的方法列表</returns>
        </member>
        <member name="T:MCPP.Net.SwaggerImportExtensions">
            <summary>
            MCP Server Builder的Swagger导入扩展
            </summary>
        </member>
        <member name="M:MCPP.Net.SwaggerImportExtensions.WithSwaggerTools(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            添加动态生成的Swagger工具类型
            </summary>
            <param name="builder">MCP服务器构建器</param>
            <param name="dynamicToolTypes">动态生成的工具类型列表</param>
            <returns>MCP服务器构建器</returns>
        </member>
        <member name="T:MCPP.Net.UnsafeImports.UnsafeAIFunctionMcpServerTool">
            <summary>
            https://github.com/modelcontextprotocol/csharp-sdk/blob/4c537ef86bd8bb10980962a8f0bac001453c5cd9/src/ModelContextProtocol/Server/AIFunctionMcpServerTool.cs
            </summary>
        </member>
        <member name="M:MCPP.Net.UnsafeImports.UnsafeAIFunctionMcpServerTool.Create(System.Reflection.MethodInfo,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <remarks>
            Microsoft.Extensions.AI 内部会使用 JsonSerializerOptions，
            </remarks>
        </member>
        <member name="M:MCPP.Net.UnsafeImports.UnsafeAIFunctionMcpServerTool.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerToolCreateOptions,System.Text.Json.JsonSerializerOptions)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="target"></param>
            <param name="options"></param>
            <param name="serializerOptions"></param>
            <returns></returns>
        </member>
        <member name="T:MCPP.Net.UnsafeImports.UnsafeAIJsonUtilities">
            <summary>
            https://github.com/dotnet/extensions/blob/f1f17e642a685df7e87b805be1efe4729ff725e4/src/Libraries/Microsoft.Extensions.AI.Abstractions/Utilities/AIJsonUtilities.Defaults.cs#L43-L73
            </summary>
        </member>
        <member name="M:MCPP.Net.UnsafeImports.UnsafeAIJsonUtilities.CreateDefaultOptions">
            <summary>
            调用私有方法 Microsoft.Extensions.AI.AIJsonUtilities.CreateDefaultOptions
            </summary>
            <returns></returns>
        </member>
        <member name="T:ISS.IPSA.AIMaaS.Controllers.EntityController">
            <summary>
            生成实体
            </summary>
        </member>
        <member name="M:ISS.IPSA.AIMaaS.Controllers.EntityController.#ctor(MCPP.Net.Repositories.Base.CreateEntity.IEntityService,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            生成实体
            </summary>
        </member>
        <member name="M:ISS.IPSA.AIMaaS.Controllers.EntityController.CreateEntity(System.String)">
            <summary>
            生成实体类
            </summary>
            <param name="entityName">表名,生成目录默认在根目录</param>
            <returns></returns>
        </member>
    </members>
</doc>
